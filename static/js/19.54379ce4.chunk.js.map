{"version":3,"file":"static/js/19.54379ce4.chunk.js","mappings":"sNAgDe,SAASA,EAAT,GAA8D,IAA1CC,EAAyC,oBACpEC,EAAgB,OAChBC,GAAQC,EAAAA,EAAAA,UACd,GAAyCC,EAAAA,EAAAA,GACvC,8BADMC,EAAR,EAAQA,MAAkBC,GAA1B,EAAeC,UAAf,EAA0BD,YAGlBE,GAAYC,EAAAA,EAAAA,GAAcH,EAAYJ,GAAtCM,QAEFE,GAASP,EAAAA,EAAAA,UA+Cf,OA7CAQ,EAAAA,EAAAA,YAAU,WACHN,IAELA,EAAMO,SAASC,MAAMC,IAAI,EAAG,EAAG,GAE/BT,EAAK,YAAgBQ,MAAMC,IAAI,GAAK,GAAK,OACxC,CAACN,KAEJG,EAAAA,EAAAA,YAAU,WAIR,GAAID,GAAUA,EAAOK,QAAS,CAE5B,IAAMC,EAAYN,EAAOK,QAAQE,SAASC,MAI1C,GAAIF,EAAU,IAAIG,WAAa,CAAC,EAAG,EAAG,GAAI,OAC1CH,EAAU,IAAIG,SAASL,IAAI,EAAG,EAAG,OAOlC,CAACJ,KAMJC,EAAAA,EAAAA,YAAU,WACR,GAAID,GAAUA,EAAOK,QAAmC,CAEtD,IAAMC,EAAYN,EAAOK,QAAQE,SAASC,MAC1C,IAAuBV,IAAYA,EAAO,KAAiB,OAE3DA,EAAO,KAAgBY,QAAQC,OAAO,IAAKC,OAC3CC,YAAW,WACTP,EAAU,IAAIG,SAASL,IAAI,EAAG,EAAG,MAChC,QAEJ,CAACb,KAGF,kCAAOuB,IAAKtB,GAAWF,GAAvB,IAA8ByB,QAAS,KAAvC,UACE,kBAAOC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAIf,MAAO,IAA9C,UACE,kBAAOa,SAAU,CAACC,KAAKC,GAAK,EAAG,EAAG,GAAlC,UACE,mBAAOF,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,GAAIf,MAAO,IAA9C,WACE,sBAAWgB,OAAQxB,EAAMyB,WAAYN,IAAKd,KAkB1C,wBACEqB,SAAU1B,EAAM2B,UAAUD,SAC1BE,SAAU5B,EAAM2B,UAAUC,SAC1BhB,SAAUZ,EAAM2B,UAAUf,YAS5B,wBACEc,SAAU1B,EAAM6B,UAAUH,SAC1BE,SAAU5B,EAAM6B,UAAUD,SAC1BhB,SAAUZ,EAAM6B,UAAUjB,SAC1BO,IAAKd,cAmBnBN,EAAAA,EAAAA,QAAgB","sources":["components/Pet/PetPandaTs.tsx"],"sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\nauthor: Omabuarts Studio (https://sketchfab.com/omabuarts)\nlicense: SKETCHFAB Standard (https://sketchfab.com/licenses)\nsource: https://sketchfab.com/3d-models/bambu-the-red-panda-wild-series-e7761ca18be74d79a79c344d7120196d\ntitle: Bambu the Red Panda - Wild Series\n*/\n\nimport * as THREE from 'three';\nimport React, { useRef, useEffect } from 'react';\nimport { useGLTF, useAnimations } from '@react-three/drei';\nimport { GLTF } from 'three-stdlib';\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Object_36: THREE.SkinnedMesh;\n    Object_38: THREE.SkinnedMesh;\n    Object_40: THREE.SkinnedMesh;\n    Object_42: THREE.SkinnedMesh;\n    Object_44: THREE.SkinnedMesh;\n    Object_46: THREE.SkinnedMesh;\n    Object_48: THREE.SkinnedMesh;\n    Object_50: THREE.SkinnedMesh;\n    _rootJoint: THREE.Bone;\n  };\n  materials: {\n    Mat_RedPanda: THREE.MeshStandardMaterial;\n  };\n};\n\ntype ActionName =\n  | 'Eat'\n  | 'Idle'\n  | 'Jump'\n  | 'Run'\n  | 'Sit'\n  | 'Sleep'\n  | 'Turn'\n  | 'Walk';\n//type GLTFActions = Record<ActionName, THREE.AnimationAction>\ninterface GLTFAction extends THREE.AnimationClip {\n  name: ActionName;\n}\n\n// interface ModelProps extends JSX.IntrinsicElements['group'] {\n//   currentAction: ActionName;\n// }\n\nexport default function Model({ ...props }: JSX.IntrinsicElements['group']) {\n  const currentAction = 'Idle';\n  const group = useRef<THREE.Group>();\n  const { nodes, materials, animations } = useGLTF(\n    '3d-models/panda/scene.gltf'\n  ) as GLTFResult;\n  const { actions } = useAnimations(animations, group);\n\n  const eyeRef = useRef();\n\n  useEffect(() => {\n    if (!nodes) return;\n    // @ts-ignore\n    nodes.EyesOpen.scale.set(1, 1, 1);\n    // @ts-ignore\n    nodes['eyesopen_05'].scale.set(0.5, 0.5, 0.5);\n  }, [actions]);\n\n  useEffect(() => {\n    // eyeRef.current.material.color.set('#ff0000');\n    // eyeRef.current.scale.set(0.5, 0.5, 0.5);\n    // loop through all bones\n    if (eyeRef && eyeRef.current) {\n      // @ts-ignore\n      const boneArray = eyeRef.current.skeleton.bones;\n      // boneArray[5].position.set(0.5, 0.5, 0.5);\n      // boneArray[9].position.set(0.5, 0.5, 0.5);\n      // boneArray[10].position.set(0, 0.1, 0.45);\n      if (boneArray[11].position === [0, 0, 0]) return;\n      boneArray[11].position.set(0, 0, 0.4);\n      // boneArray[5].scale.set(0.5, 2, 1);\n      // boneArray[12].position.set(0.5, 0.5, 0.5);\n      //boneArray[13].position.set(0, -0.05, 0.4);\n      // boneArray[14].position.set(0.5, 0.5, 0.5);\n      // console.log('boneArray after', boneArray);\n    }\n  }, [eyeRef]);\n\n  // useEffect(() => {\n  //   actions.Idle.reset().fadeIn(0.5).play();\n  // }, []);\n\n  useEffect(() => {\n    if (eyeRef && eyeRef.current && currentAction !== null) {\n      // @ts-ignore\n      const boneArray = eyeRef.current.skeleton.bones;\n      if (!currentAction || !actions || !actions[currentAction]) return;\n      // @ts-ignore\n      actions[currentAction].reset().fadeIn(0.5).play();\n      setTimeout(() => {\n        boneArray[11].position.set(0, 0, 0.4);\n      }, 550);\n    }\n  }, [currentAction]);\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.01}>\n        <group rotation={[Math.PI / 2, 0, 0]}>\n          <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>\n            <primitive object={nodes._rootJoint} ref={eyeRef} />\n            {/* eyes 13 mad */}\n            {/* <skinnedMesh\n              geometry={nodes.Object_36.geometry}\n              material={nodes.Object_36.material}\n              skeleton={nodes.Object_36.skeleton}\n            /> */}\n            {/* <skinnedMesh\n              geometry={nodes.Object_38.geometry}\n              material={nodes.Object_38.material}\n              skeleton={nodes.Object_38.skeleton}\n            /> */}\n            {/* <skinnedMesh\n              geometry={nodes.Object_40.geometry}\n              material={nodes.Object_40.material}\n              skeleton={nodes.Object_40.skeleton}\n            /> */}\n            {/* bone 11 eyes confused */}\n            <skinnedMesh\n              geometry={nodes.Object_42.geometry}\n              material={nodes.Object_42.material}\n              skeleton={nodes.Object_42.skeleton}\n            />\n            {/* bone 10 eyes confused */}\n            {/* <skinnedMesh\n              geometry={nodes.Object_44.geometry}\n              material={nodes.Object_44.material}\n              skeleton={nodes.Object_44.skeleton}\n            /> */}\n            {/* body */}\n            <skinnedMesh\n              geometry={nodes.Object_46.geometry}\n              material={nodes.Object_46.material}\n              skeleton={nodes.Object_46.skeleton}\n              ref={eyeRef}\n            />\n            {/* <skinnedMesh\n              geometry={nodes.Object_48.geometry}\n              material={nodes.Object_48.material}\n              skeleton={nodes.Object_48.skeleton}\n            /> */}\n            {/* <skinnedMesh\n              geometry={nodes.Object_50.geometry}\n              material={nodes.Object_50.material}\n              skeleton={nodes.Object_50.skeleton}\n            /> */}\n          </group>\n        </group>\n      </group>\n    </group>\n  );\n}\n\nuseGLTF.preload('3d-models/panda/scene.gltf');\n"],"names":["Model","props","currentAction","group","useRef","useGLTF","nodes","animations","materials","actions","useAnimations","eyeRef","useEffect","EyesOpen","scale","set","current","boneArray","skeleton","bones","position","reset","fadeIn","play","setTimeout","ref","dispose","rotation","Math","PI","object","_rootJoint","geometry","Object_42","material","Object_46"],"sourceRoot":""}